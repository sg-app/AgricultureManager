name: Build Test and Semantic Versioning

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    env:
      MAIN_PROJECT_DIR: "src/AgricultureManager.CoreApp/"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore ${{ env.MAIN_PROJECT_DIR }}

      - name: Build
        run: dotnet build ${{ env.MAIN_PROJECT_DIR }} --configuration Release --no-restore

      - name: Test
        run: dotnet test ${{ env.MAIN_PROJECT_DIR }} --no-restore --verbosity normal

  semantic-version:
    name: Semantic Versioning
    needs: build
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && (startsWith(github.event.head_commit.message, 'fix') || startsWith(github.event.head_commit.message, 'feat') || startsWith(github.event.head_commit.message, 'breaking') || startsWith(github.event.head_commit.message, 'Merge')) }}
    outputs:
      new_version: ${{ steps.semantic-release.outputs.new_version }}

    permissions:
      actions: read
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Install dependencies
        run: npm install -g semantic-release semantic-release-dotnet @semantic-release/git @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/github
      
      - name: Run Semantic Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release | tee release.log
          VERSION=$(cat release.log | grep -oP '(?<=next release version is )[\d\.]+(-beta\.\d+)?')
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"

