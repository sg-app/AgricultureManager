@inherits FluxorComponent
@implements IDisposable
@using AgricultureManager.Core.Application.Features.FertilizationFeatures
@using AgricultureManager.Core.Application.Store.Features.FertilizationJobStore

<RadzenButton class="rz-border-radius-10 rz-shadow-4"
Click="OpenEditDialog"
ButtonStyle="ButtonStyle.Primary"
Size="ButtonSize.Small"
Icon="add" />

@if (HarvestUnitState.Value.SelectedHarvestUnits?.Count == 1)
{
    <RadzenDataList class="pt-2"
    Data="@FertilizationJobState.Value.Fertilizations.OrderBy(x=>x.Date)"
    IsLoading="@FertilizationJobState.Value.IsLoading"
    WrapItems="true">
        <Template Context="item">
            <RadzenCard class="position-relative" Style="width:600px">
                <div class="position-absolute translate-middle-y top-0 start-0">
                    <RadzenButton class="rz-border-radius-10 rz-shadow-4"
                    Click="@(()=>OnEditClicked(item))"
                    ButtonStyle="ButtonStyle.Secondary"
                    Icon="edit"
                    Size="ButtonSize.Small" />
                    <RadzenButton class="rz-border-radius-10 rz-shadow-4"
                    Click="@(()=>OnRemoveClicked(item))"
                    ButtonStyle="ButtonStyle.Warning"
                    Icon="delete"
                    Size="ButtonSize.Small" />
                </div>
                <div class="pt-3">
                    <FertilizationJobDetail Item="item" />
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}

@code {
    [Inject] public IMediator Mediator { get; set; } = default!;
    [Inject] public DialogService DialogService { get; set; } = default!;
    [Inject] public IDispatcher Dispatcher { get; set; } = default!;
    [Inject] public IState<HarvestUnitState> HarvestUnitState { get; set; } = default!;
    [Inject] public IState<FertilizationJobState> FertilizationJobState { get; set; } = default!;

    private FertilizationVm? _selectedItem;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        HarvestUnitState.StateChanged += LoadData;
        LoadData(null, default!);
    }

    private void LoadData(object? sender, EventArgs e)
    {
        var harvestUnitId = HarvestUnitState.Value.SelectedHarvestUnits?.FirstOrDefault()?.Id;
        if (harvestUnitId is null)
            return;

        Dispatcher.Dispatch(new LoadFertilizationJobDataAction((Guid)harvestUnitId));
    }

    private async Task OnRemoveClicked(FertilizationVm item)
    {
        var dialogResponse = await DialogService.Confirm("Soll der Datensatz wirklich gelöscht werden?", "Datensatz löschen", new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nein" });
        if (dialogResponse is null || dialogResponse == false)
            return;

        var response = await Mediator.Send(new RemoveFertilizationCommand(item.Id));
        if (response.Success)
            Dispatcher.Dispatch(new RemoveFertilizationJobAction(item.Id));
    }

    private async Task OpenEditDialog()
    {
        await DialogService.OpenAsync<FertilizationJobEditor>("Bearbeiten",
            new Dictionary<string, object?> {
                { nameof(FertilizationJobEditor.Item), _selectedItem }
                            });

        _selectedItem = null;

    }

    private async Task OnEditClicked(FertilizationVm item)
    {
        _selectedItem = item;
        await OpenEditDialog();
    }

    public void Dispose()
    {
        HarvestUnitState.StateChanged -= LoadData;
    }
}
